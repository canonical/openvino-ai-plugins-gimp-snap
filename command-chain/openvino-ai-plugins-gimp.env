# Plugins only support Intel hardware
if grep -qw "GenuineIntel" /proc/cpuinfo; then

  # Config stores python_path, weight_path, and supported_devices
  export GIMP_OPENVINO_CONFIG_PATH="${SNAP_USER_COMMON}"
  # Path to models
  export GIMP_OPENVINO_MODELS_PATH="${SNAP_USER_COMMON}"

  if [ "${SNAP_NAME}" = "gimp" ]; then
    CONTENT_PATH="${SNAP}"/gimp-plugins/openvino-gimp
  else
    CONTENT_PATH="${SNAP}"/openvino-gimp
  fi
  export PATH="${PATH}":"${CONTENT_PATH}"/usr/bin:"${CONTENT_PATH}"/bin
  export LD_LIBRARY_PATH="${CONTENT_PATH}"/usr/lib/$(uname -m)-linux-gnu:"${LD_LIBRARY_PATH}"
  export PYTHONPATH="${CONTENT_PATH}"/lib/python3.12/site-packages:"${CONTENT_PATH}"/usr/lib/python3/dist-packages:"${PYTHONPATH}"
  export OCL_ICD_VENDORS="${CONTENT_PATH}"/etc/OpenCL/vendors
  # GIMP retrieves plugin version from git tags
  export GIT_DIR="${CONTENT_PATH}"/../openvino_utils/.git
  export GIT_EXEC_PATH="${CONTENT_PATH}"/usr/lib/git-core
  export GIT_TEMPLATE_DIR="${CONTENT_PATH}"/usr/share/git-core/templates
  weights_dir="${CONTENT_PATH}"/weights

  # dependency for model_setup.py
  mkdir -p "${GIMP_OPENVINO_MODELS_PATH}"/{weights,mms_tmp}

  echo "[OpenVINO AI Plugins for GIMP]: Installing super resolution and semantic segmentation models to ${GIMP_OPENVINO_MODELS_PATH} and config to ${GIMP_OPENVINO_CONFIG_PATH}"

  # Copy super resolution and semseg models to $GIMP_OPENVINO_MODELS_PATH/weights and generate config file
  # Note we force success and suppress output because the script attempts (and fails) to
  # adjust permissions on files inside the snap
  python3 -c "from gimpopenvino import install_utils; install_utils.complete_install(repo_weights_dir=r'${weights_dir}')" >/dev/null 2>&1 || true

fi
